" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
else
  set autoindent=false

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" ##################################################################  
" ##################################################################  
"                  Start Renzo's Customizations
" ##################################################################  
" ##################################################################  

" Set the color scheme for plain vi
colorscheme desert

" Associate pom files to taskpaper plugin
augroup taskpaper
  au! BufRead,BufNewFile *.pom   setfiletype taskpaper
augroup END

" Use softtabs
set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab

" Useful expansions
imap hh <Space>=><Space>
imap jj <Esc>

" highlight line with cursor
set cursorline

" inserts new line without going into insert mode
map <S-Enter> O<ESC> 
map <Enter> o<ESC>

" Show line numbers
set number

" highlight matching brackets
set matchpairs+=<:>

" turn off the bell
set vb t_vb= 

" Invoke a web browser
function! Browser ()
  let line0 = getline (".")
  let line = matchstr (line0, "http[^ ]*")
  :if line==""
  let line = matchstr (line0, "ftp[^ ]*")
  :endif
  :if line==""
  let line = matchstr (line0, "file[^ ]*")
  :endif
  let line = escape (line, "#?&;|%")
  ":if line==""
  " let line = "\"" . (expand("%:p")) . "\""
  ":endif
  exec ':silent !open ' . "\"" . line . "\""
endfunction
map ,w :call Browser ()<CR>

" no backups
set noswapfile
set nowritebackup 

" Some initial folding settings
" Then you can toggle folding with za. You can fold everything with zM and unfold 
" everything with zR. zm and zr can be used to get those folds just right
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set foldlevelstart=10

" markdown support
" http://plasticboy.com/markdown-vim-mode/
augroup mkd
autocmd BufRead,BufNewFile *.mkd set ai formatoptions=tcroqn2 comments=n:>
autocmd BufRead,BufNewFile *.markdown set ai formatoptions=tcroqn2 comments=n:>
augroup END

" going hard core, disabling arrows
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" display cursor line
set cursorline

" Specky configuration
" http://www.vim.org/scripts/script.php?script_id=2286
let g:speckyBannerKey = "<C-S>b"
let g:speckyQuoteSwitcherKey = "<C-S>'"
let g:speckyRunRdocKey = "<C-S>r"
let g:speckySpecSwitcherKey = "<C-S>x"
let g:speckyRunSpecKey = "<C-S>s"
let g:speckyRunSpecCmd = "spec -fs"
let g:speckyRunRdocCmd = "fri -L -f plain"
let g:speckyWindowType = 2

" Run single test mapping
" http://www.vim.org/scripts/script.php?script_id=2869
nmap <silent> <leader>t <Plug>ExecuteRubyTest
set makeprg=spec

" toggle paste without indentation for
" copy pasting from other application
set pastetoggle=<F2>

" softwrap enable me
set linebreak

" map ack to \f
" let mapleader=","
map <leader>f :Ack 

" don't bother alert me when unsaved buffers
set hidden

" Turn on smartcase for searches
set smartcase
set ignorecase

" Fuzzy File Finder
nmap <leader>t :FufFile **/<CR>
nmap <leader>b :FufBuffer<CR>
let g:fuf_file_exclude = '\v\.svn/$|\.git/$|\~$|\.o$|\.exe$|\.bak$|\.swp$|\.swo$|((^|[/\\])\.[/\\]$)'
"let g:fuf_dir_exclude = '\v(^|[/\\])\.(hg|git|bzr)($|[/\\])'
let g:fuf_dir_exclude = '\v(^|[/\\])\.(hg|git|bzr)($|[/\\])|[/\\])(log|build)($'

" Tell easytags to create the tag file on
" the vim root
:let g:easytags_file = '~/.vim/tags'

" Setup nailgun server for vimclojure
let vimclojure#WantNailgun = 1
let vimclojure#NailgunClient = "/Users/reborg/Downloads/vimclojure-nailgun-client/ng"
"let clj_want_gorilla = 1
